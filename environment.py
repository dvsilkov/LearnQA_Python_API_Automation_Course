import os

"""
Реализован выбор окружения на котором необходимо запускать тесты.
Есть две среды: 
dev - ссылка "https://playground.learnqa.ru/api_dev"
prod - ссылка "https://playground.learnqa.ru/api"
Для их использования создана переменная ENV с этими значения.

Перед запуском тестов предварительно нужно создать переменную ENV и задать ей значение:
set ENV=prod
Можно проверить значение:
echo %ENV%

Теперь тесты будут запущены в prod окружении.

Если переменная ENV не создана, тесты по умолчанию будут запущены для dev окружения

"""


class Environment:
    """ Класс с методами для выбора переменной среды при запуске тестов """

    # возможные значения переменной среды
    dev = "dev"  # окружение для разработчиков
    prod = "prod"  # окружение PROD

    # словарь ссылками для запуска тестов, которые соответствуют значениям переменной среды
    urls = {
        dev: "https://playground.learnqa.ru/api_dev",
        prod: "https://playground.learnqa.ru/api"
    }

    def __init__(self):
        """ Конструктор класса, в котором задается значение переменной среды """
        try:
            # os.environ возвращает словарь со всеми переменными в виде "название": "значение"
            self.env = os.environ["ENV"]  # получаем значение переменной "ENV"
        except KeyError:
            # если сработало исключение, значит такой переменной нет
            # в этом случае присваиваем значение по умолчанию self.dev, чтобы не запустить тесты для PROD
            self.env = self.dev

    def get_base_url(self):
        """ Метод для получения базовой url, в зависимости от выбранной среды """
        if self.env in self.urls:
            return self.urls[self.env]
        else:
            # исключение если переменная ENV существует, но нет ожидаемого значения
            raise Exception(f"Unknown value of ENV variable '{self.env}'")


# создаем экземпляр класса - объект переменной среды
env_object = Environment()
